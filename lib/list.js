// Generated by LispyScript v0.2.1
var List = function(head, tail) {
  this.head = head;
  this.tail = tail;
  this.length = ((tail).length + 1);
  return this;
};

List.prototype.length = 0;

List.prototype.tail = Object.create(List.prototype);

List.prototype.toString = function() {
  return (function loop(result, list) {
    var recur = loop;
    while ((recur === loop)) {
      recur = isEmpty(list) ?
        ''.concat("(", result.substr(1), ")") :
        (result = ''.concat(result, " ", (Object.prototype.toString.call(first(list)) === '[object Array]') ?
          ''.concat("[", first(list).join(" "), "]") :
          (first(list) == null) ?
            "nil" :
            (Object.prototype.toString.call(first(list)) === '[object String]') ?
              JSON.stringify(first(list)) :
              (Object.prototype.toString.call(first(list)) === '[object Number]') ?
                JSON.stringify(first(list)) :
                first(list)),
         list = rest(list),
         loop)
    };
    return recur;
  })("", this);
};

var isList = function(value) {
  return List.prototype.isPrototypeOf(value);
};

var count = function(list) {
  return (list).length;
};

var isEmpty = function(list) {
  return (count(list) == 0);
};

var first = function(list) {
  return (list).head;
};

var second = function(list) {
  return first(rest(list));
};

var third = function(list) {
  return first(rest(rest(list)));
};

var rest = function(list) {
  return (list).tail;
};

var cons = function(head, tail) {
  return new List(head, tail);
};

var list = function() {
  return ((arguments).length == 0) ?
    Object.create(List.prototype) :
    Array.prototype.slice.call(arguments).reduceRight(function(tail, head) {
      return cons(head, tail);
    }, list());
};

var reverse = function(source) {
  return (function loop(items, source) {
    var recur = loop;
    while ((recur === loop)) {
      recur = isEmpty(source) ?
        list.apply(list, items) :
        (items = [ first(source) ].concat(items),
         source = rest(source),
         loop)
    };
    return recur;
  })([], source);
};

var mapList = function(source, f) {
  return isEmpty(source) ?
    source :
    cons(f(first(source)), mapList(rest(source), f));
};

var reduceList = function(form, f, initial) {
  return (function loop(result, items) {
    var recur = loop;
    while ((recur === loop)) {
      recur = isEmpty(items) ?
        result :
        (result = f(result, first(items)),
         items = rest(items),
         loop)
    };
    return recur;
  })((initial == null) ?
    first(form) :
    initial, (initial == null) ?
    rest(form) :
    form);
};

var concatList = function(left, right) {
  return (function loop(result, prefix) {
    var recur = loop;
    while ((recur === loop)) {
      recur = isEmpty(prefix) ?
        result :
        (result = cons(first(prefix), result),
         prefix = rest(prefix),
         loop)
    };
    return recur;
  })(right, reverse(left));
};

var listToVector = function(source) {
  return (function loop(result, list) {
    var recur = loop;
    while ((recur === loop)) {
      recur = isEmpty(list) ?
        result :
        (result = (function() {
          result.push(first(list));
          return result;
        })(),
         list = rest(list),
         loop)
    };
    return recur;
  })(Array(), source);
};

exports.isEmpty = isEmpty;
exports.count = count;
exports.isList = isList;
exports.first = first;
exports.second = second;
exports.third = third;
exports.rest = rest;
exports.cons = cons;
exports.list = list;
exports.reverse = reverse;
exports.reduceList = reduceList;
exports.mapList = mapList;
exports.listToVector = listToVector;
exports.concatList = concatList;

