// Generated by LispyScript v0.2.0
require("./node");

var fs = require("fs");

var path = require("path");

var ls = require("../lib/ls");

var repl = require("./repl");

var Module = require("module")["Module"];

var exit = function(error) {
  return error ?
    (function() {
      console.log(error);
      return process.exit(1);
    })() :
    process.exit(0);
};

var compile = function(input, output, uri) {
  var source = "";
  input.on("data", function(chunck) {
    return source = [source,chunck.toString()].join('');
  });
  input.on("end", function() {
    return (function() {
      try {
        return output.write(ls._compile(source, uri))
      } catch (e) {
        return exit(e)
      };
    })();
  });
  input.on("error", exit);
  return output.on("error", exit);
};

exports.run = function() {
  return (process.argv.length === 2) ?
    (function() {
      process.stdin.resume();
      process.stdin.setEncoding("utf8");
      compile(process.stdin, process.stdout, process.cwd());
      return setTimeout(function() {
        return (process.stdin.bytesRead === 0) ?
          (function() {
            process.stdin.removeAllListeners("data");
            return repl.runRepl();
          })() :
          void 0;
      }, 20);
    })() :
    (process.argv.length === 3) ?
      Module._load(path.resolve(process.argv[2]), null, true) :
      compile(fs.createReadStream(process.argv[2]), (process.argv[3] === "-") ?
        process.stdout :
        fs.createWriteStream(process.argv[3]), path.resolve(process.argv[2]));
};
