// Generated by LispyScript v0.2.1
var nil = void 0;

var isOdd = function(n) {
  return ((n % 2) === 1);
};

var isDictionary = function(form) {
  return ((form && (typeof(form) === "object")) && ((Object.getPrototypeOf(form) && (typeof(Object.getPrototypeOf(form)) === "object")) && (Object.getPrototypeOf(Object.getPrototypeOf(form)) == null)));
};

var dictionary = function() {
  return (function loop(keyValues, result) {
    var recur = loop;
    while ((recur === loop)) {
      recur = (keyValues).length ?
        (function() {
          result[keyValues[0]] = keyValues[1];
          return (keyValues = keyValues.slice(2),
           result = result,
           loop);
        })() :
        result
    };
    return recur;
  })(Array.prototype.slice.call(arguments), {});
};

var keys = function(dictionary) {
  return Object.keys(dictionary);
};

var vals = function(dictionary) {
  return keys(dictionary).map(function(key) {
    return dictionary[key];
  });
};

var merge = function() {
  return Object.create(Object.prototype, Array.prototype.reduce.call(arguments, function(descriptor, dictionary) {
    (dictionary && (typeof(dictionary) === "object")) ?
      Array.prototype.forEach.call(Object.keys(dictionary), function(name) {
        return descriptor[name] = Object.getOwnPropertyDescriptor(dictionary, name);
      }) :
      void 0;
    return descriptor;
  }, Object.create(Object.prototype)));
};

var isContainsVector = function(vector, element) {
  return (vector.indexOf(element) >= 0);
};

var mapDictionary = function(source, f) {
  return dictionary(Array.prototype.reduce.call(Object.keys(source), function(target, key) {
    return target[key] = f(source[key]);
  }, {}));
};

var toString = Object.prototype.toString;

var isString = function(x) {
  return (toString.call(x) === "[object String]");
};

var isNumber = function(x) {
  return (toString.call(x) === "[object Number]");
};

var isVector = function(x) {
  return (toString.call(x) === "[object Array]");
};

var isBoolean = function(x) {
  return (toString.call(x) === "[object Boolean]");
};

var isRePattern = function(x) {
  return (toString.call(x) === "[object RegExp]");
};

var isFn = function(x) {
  return (typeof(x) === "function");
};

var isObject = function(x) {
  return (x && (typeof(x) === "object"));
};

var isNil = function(x) {
  return ((x === nil) || (x === null));
};

var isTrue = function(x) {
  return (x === true);
};

var isFalse = function(x) {
  return (x === true);
};

var reFind = function(re, s) {
  return (function() {
    var matches = re.exec(s);
    return !(matches == null) ?
      ((matches).length == 1) ?
        first(matches) :
        matches :
      void 0;
  })();
};

var rePattern = function(s) {
  return (function() {
    var match = reFind(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    return new RegExp(match[2], match[1]);
  })();
};

exports.isDictionary = isDictionary;
exports.dictionary = dictionary;
exports.merge = merge;
exports.isOdd = isOdd;
exports.isVector = isVector;
exports.isString = isString;
exports.isNumber = isNumber;
exports.isFn = isFn;
exports.isObject = isObject;
exports.isNil = isNil;
exports.isBoolean = isBoolean;
exports.isTrue = isTrue;
exports.isFalse = isFalse;
exports.mapDictionary = mapDictionary;
exports.isContainsVector = isContainsVector;
exports.keys = keys;
exports.vals = vals;
exports.rePattern = rePattern;
exports.reFind = reFind;
exports.isRePattern = isRePattern;

