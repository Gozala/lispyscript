// Generated by LispyScript v0.2.1
var list = require("./list").list;
var isList = require("./list").isList;
var first = require("./list").first;

var withMeta = function(value, metadata) {
  value.metadata = metadata;
  return value;
};

var meta = function(value) {
  return (value && (typeof(value) === "object")) ?
    (value).metadata :
    void 0;
};

var isAtom = function(form) {
  return ((Object.prototype.toString.call(form) === '[object Number]') || ((Object.prototype.toString.call(form) === '[object String]') || ((typeof(form) === "boolean") || ((form == null) || (isKeyword(form) || (isSymbol(form) || (isList(form) && isEmpty(form))))))));
};

var symbol = function(ns, id) {
  return isSymbol(ns) ? (ns) :
  isKeyword(ns) ? ("\uFEFF".concat(name(ns))) :
  "else" ? ((id == null) ?
    "\uFEFF".concat(ns) :
    "\uFEFF".concat(ns, "/", id)) :
  void 0;
};

var isSymbol = function(x) {
  return ((Object.prototype.toString.call(x) === '[object String]') && (x.charAt(0) === "\uFEFF"));
};

var isSymbolIdentical = function(actual, expected) {
  return (actual === expected);
};

var isKeyword = function(x) {
  return ((Object.prototype.toString.call(x) === '[object String]') && (x.charAt(0) === "\uA789"));
};

var keyword = function(ns, id) {
  return isKeyword(ns) ? (ns) :
  isSymbol(ns) ? ("\uA789".concat(name(ns))) :
  "else" ? ((id == null) ?
    "\uA789".concat(ns) :
    "\uA789".concat(ns, "/", id)) :
  void 0;
};

var name = function(value) {
  return (isKeyword(value) || isSymbol(value)) ? ((((value).length > 2) && (value.indexOf("/") >= 0)) ?
    value.substr((value.indexOf("/") + 1)) :
    value.substr(1)) :
  (Object.prototype.toString.call(value) === '[object String]') ? (value) :
  void 0;
};

var gensym = function(prefix) {
  return symbol(''.concat((prefix == null) ?
    "G__" :
    prefix, gensym.base = (gensym.base + 1)));
};

gensym.base = 0;

var unquote = symbol("unquote");

var unquoteSplicing = symbol("unquote-splicing");

var syntaxQuote = symbol("syntax-quote");

var quote = symbol("quote");

var deref = symbol("deref");

var set = symbol("set");

var isUnquote = function(form) {
  return (isList(form) && (first(form) === unquote));
};

var isUnquoteSplicing = function(form) {
  return (isList(form) && (first(form) === unquoteSplicing));
};

var isQuote = function(form) {
  return (isList(form) && isSymbolIdentical(first(form), quote));
};

var isSyntaxQuote = function(form) {
  return (isList(form) && (first(form) === syntaxQuote));
};

exports.meta = meta;
exports.withMeta = withMeta;
exports.isAtom = isAtom;
exports.isSymbol = isSymbol;
exports.symbol = symbol;
exports.isSymbolIdentical = isSymbolIdentical;
exports.isKeyword = isKeyword;
exports.keyword = keyword;
exports.gensym = gensym;
exports.name = name;
exports.deref = deref;
exports.set = set;
exports.isUnquote = isUnquote;
exports.unquote = unquote;
exports.isUnquoteSplicing = isUnquoteSplicing;
exports.unquoteSplicing = unquoteSplicing;
exports.isQuote = isQuote;
exports.quote = quote;
exports.isSyntaxQuote = isSyntaxQuote;
exports.syntaxQuote = syntaxQuote;

